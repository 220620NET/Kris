Foundations Projec:
    - Overview:
        - The foundations project will be an Expense Reimbursement System
        - Each of you will be given weekly requirements for this first project
        - You will be required to track your progress as you complete requirements for each weekly
        - this is an individual project
        -Everyone has the same requirements so questions to each other are allowed but no copying code
        - 4 weeks
    -Tracking progress 
        -Trello Board with name at the top
        -each requirement has a checklist that can be checked off as you complete them
        - some of the requirements will have PNG images of code that you can reference for help (Pseudo-code)

Technology Project:
    -Overview:
        - Will be working with a team
        - Will allow you to further expand you technical knowledge
        - Goal is to build teamwork skills and get practical experience working in a team project
        - 3 Weeks
    - Themes:
        - E-Commerce
            - Game Stores
            - Book Stores
            - computer Parts
        -Social Media
            - Forum
            - Story Telling
            - Chatrooms
        -Insurance
            - Real Estate
            - Healthcar
            - Car Insurance

Capstone Project:
    - Final Project
    - working with your entire team
    - simulated experience of a client Project
    - 3 weeks

Arrays:
    - arrays start with an index of 0 
    - when declared with a new arrayTyp[int] will save that many spaces in memory 32-bit space each
    - Find method for arrays
    - Array.Copy method can copy a section of the array
    - Array.Clone method to create a shallow copy of the array
    - int[,] <name> = new int[1,2] to create a multi-dimensional array
    - Jagged Array: int[][] <name> = new int[1][]
    - You can also pre-fill the array for a multi-dimensional array by doing {},{},{}
        - the number of braces is determined by the first integer in the declaration of the array type;

Pokemon Storage App:
    - I want to create an application that pokemon trainers can store, view, and retrieve their stored pokemon
    - User Stories:
        - People should be able to register themselves as pokemon trainer in the system
        - They should be able to store their pokemon (perhaps the box system)
        - They should be able to view their stored pokemon
        -They should be able to retrieve the stored pokemon
    -Feature/ Spec:
        - LogIn/ register
        - View Trainer specific pokemon
        - retrieve
        - Store
    -Pokemon Trainers:
        - name
        - # of Badges
    - Pokemon:
        - name
        - skills
        - level
        - types
        - caught location
        - evolved

Exceptions:
    -They stand for "Exceptional Events"
    - These are events that interrupt normal flow of the program. They are different from error because exceptions can be managed/handled where as errors are usually fatal
    - Some examples of exceptions is "Null Reference Exception which happens when I try to read a property or invoke a method of null,
    - We handle these exceptions with Try/Catch block
    -First, we wrap our "risky" code(aka the code that might throw an exception) in a try block
    - and then, we follow that up with catch block, to catch any exceptions they throw and act accordingly
    -Finally, there is a finally block to handle anything that nees to be managed before existing try/catch.
    -IE cleaning up resources that is not managed by your runtime such as closing connections. and this finally block is executed regardless of whether it caught an exception of not
    -There are many different types of exceptions for different scenarios.
    - You want to use the appropriate type of exception to properly communicate to the rest of the program why it failed. However, all these exceptions actually inherit from exception class
    - and if you find that there is no built in exception for the thing you're trying to do, you can create your own custom exception