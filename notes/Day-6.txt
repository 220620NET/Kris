Software Development Life Cycle:
    -   SDLC referes to different stages software goes through during its development
        - Define the problem ("planning")
        - Coming up with the map of what the application looks like ("design")
        - Psuedocode
        - Write the code ("Implementation")
        - Test
        - Refactor (go back and forth between testing/refactor)
        - Publish

Waterfall
    -This particular model comes from factory/production line where they produce physical goods and going back/starting over costed a lot of money.
    - The stages (Planning, Design, Implementation, Testing/Verification,Pushing) are done once, and is expected to be as good as they can be.
    - So these are handy for things that have to be super exact (military mission, apollo launches)
    - But it also came with some drawbacks such as 
        -can't go back and fix so stakes for each stages are high
        - Lack of iteration means that there will be very little change to learn from the testing and reflect the result on the current production
        - Lack of innovation
        - It's inefficient since we aren't always sure what we want exactly

Differences between physical goods and software
    - unlike physical goods, it's so much easier to revise/improve software because
        1. you can always start fresh
        2. there is no raw material needed to produce softwares
Agile
    is a set of values to consider when developing software 
        - Individuals and interactions over processes and tools
        - working software over comprehensive documentations
        - customer collaboration over contract negotiation
        - responding to change over following a planning

Scrum
    - Is one of the implementation of Agile, and it is characterized by interactions
    - Unlike waterfall where each stage is gone through once, teams utilizing Scrum iterate through those same stages in a rapid manner (2-3 weeks).
    -That unit of iteration is called a sprint
    - In a sprint, we plan the work that seems achievable in upcoming sprint (2-3 weeks worth of work), we design, implement, test, and deploy to production at the end of the sprint

Part of a sprint:
    - Sprint planning meeting: you meet together as a team and decide on the scope of the sprint
        - how much work seems doable in next 2-3 weeks?
        - Which feature/bug takes the most priority?
        - Any carryover from the last sprint we need to take account to?
    -Daily standup meeting: During sprint
        - This is an opportunity to catch up to what everyone else is doing in your team
        - This as a short meeting - suposed to be done in ~10 min max
            -while standing up the first thing in the morning
                -3 Questions that gets asked here:
                    -What did you do yesterday
                    -what do you plan on doing today
                    - Any blockers
    - Burndown charts
        - Using the points assigned to each "user stories"/items we can track how our sprint is going
        - Comparing the actual remaining points to the projected progress, the team can make adjustments to the sprint
        
Kanban Board
    - Kandan board is to track each items movement through different stages
        - Stages each items go through
            - Product Backlog - wish list
            - Sprint Backlog - todo list
            - doing - actively being worked on 
            - Testing- the implementation has been complete
            - Staging -the verfication is done
            - Done - done
        -Trello, Github, Jira

- Sprint Retrospectiv
    - The sprint is now done. The team now meets to discuss how the sprint went
        - How did it go?
        - Any outstanding items?
        - Pacing
        -Challenges
        -What worked well